#include <stdio.h>
#include <malloc.h>

struct Queue
{
    int *list;
    int size, front, rear;
};

// Queue Operations
void Create(struct Queue *, int);
void Enqueue(struct Queue *, int);
int Dequeue(struct Queue *);
void Peek(struct Queue *);
void Reverse(struct Queue *);

int main()
{
    struct Queue queue;

    Create(&queue, 4);

    Peek(&queue);
    Enqueue(&queue, 1);
    Enqueue(&queue, 2);
    Enqueue(&queue, 3);
    Enqueue(&queue, 4);
    Enqueue(&queue, 5);
    Peek(&queue);
     Dequeue(&queue);
//    Reverse(&queue);
    Peek(&queue);

    free(queue.list);
    return 0;
}

void Create(struct Queue *queue, int size)
{
    queue->list = (int *)malloc(sizeof(int) * size);
    queue->size = size;
    queue->front = queue->rear = size - 1;
}

void Enqueue(struct Queue *queue, int data)
{
    if (queue->rear >= 0)
    {
        queue->list[queue->rear--] = data;
        printf("Inserted: %d\n", data);
    }
    else
    {
        printf("Queue Full!\n");
    }
}

int Dequeue(struct Queue *queue)
{
    if (queue->rear != queue->front)
    {
        return queue->list[queue->front--];
    }
    else
    {
        printf("Empty Queue!\n");
    }
    return 0;
}

//void Reverse(struct Queue *queue)
//{
//    struct Queue rqueue;
//    Create(&rqueue, queue->size);
//
//    for (i = queue->rear + 1; i <= queue->front; i++)
//    {
//        Enqueue(&rqueue, queue->list[i]);
//    }
//
//    queue->list = rqueue.list;
//}

void Peek(struct Queue *queue)
{
    if (queue->rear != queue->front)
    {
        int i;
        for (i = queue->rear + 1; i <= queue->front; i++)
        {
            printf("[%d]", queue->list[i]);
        }
        printf("\n");
    }
    else
    {
        printf("Empty Queue!\n");
    }
}
